{"version":3,"sources":["components/Calculations-List.component.js","App.js","reportWebVitals.js","index.js"],"names":["CalculationsList","props","getData","axios","get","then","response","data","length","state","latestTimeStamp","createdAt","setState","window","location","reload","onChangeOperand1","bind","onChangeOperand2","onChangeOperator","onSubmit","operand1","operand2","operator","calculations","this","intervalID","setInterval","e","target","value","preventDefault","operand11","operand12","match","calculation","console","log","post","res","clearInterval","className","type","required","onChange","border","map","calc","result","_id","Component","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eafb9b88.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class CalculationsList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeOperand1 = this.onChangeOperand1.bind(this);\r\n        this.onChangeOperand2 = this.onChangeOperand2.bind(this);\r\n        this.onChangeOperator = this.onChangeOperator.bind(this);\r\n        this.getData = this.getData.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            operand1: '',\r\n            operand2: '',\r\n            operator: '',\r\n            calculations: [],\r\n            latestTimeStamp: ''\r\n        }\r\n    }\r\n    intervalID;\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:5000/calculations')\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    this.setState({\r\n                        calculations: response.data,\r\n                        latestTimeStamp: response.data[0].createdAt\r\n                    });\r\n                }\r\n            });\r\n        this.setState({\r\n            operand1: 'Enter operand 1',\r\n            operand2: 'Enter operand 2',\r\n            operator: '+',\r\n\r\n        });\r\n\r\n        this.intervalID = setInterval(this.getData, 5000);\r\n\r\n    }\r\n\r\n    getData = () => {\r\n        // do something to fetch data from a remote API.\r\n        // const lasttime='';\r\n        axios.get('http://localhost:5000/calculations')\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    if (this.state.latestTimeStamp !== response.data[0].createdAt) {\r\n                        this.setState({\r\n                            latestTimeStamp: response.data[0].createdAt\r\n                        });\r\n                        window.location.reload();\r\n                    }\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    onChangeOperand1(e) {\r\n      \r\n        this.setState({\r\n            operand1: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeOperand2(e) {\r\n        this.setState({\r\n            operand2: e.target.value\r\n        });\r\n    }\r\n    onChangeOperator(e) {\r\n        this.setState({\r\n            operator: e.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const operand11=this.state.operand1;\r\n        const operand12=this.state.operand2;\r\n        if(operand11.match(/^[a-zA-Z]+$/)){\r\n            window.location = '/';\r\n            return;\r\n        }\r\n        if(operand12.match(/^[a-zA-Z]+$/)){\r\n            window.location = '/';\r\n            return;\r\n        }\r\n\r\n        const calculation = {\r\n            operand1: this.state.operand1,\r\n            operand2: this.state.operand2,\r\n            operator: this.state.operator\r\n\r\n        }\r\n        console.log(calculation)\r\n\r\n        axios.post('http://localhost:5000/calculations', calculation)\r\n            .then(res => console.log(res.data));\r\n\r\n        window.location = '/';\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        /*\r\n          stop getData() from continuing to run even\r\n          after unmounting this component\r\n        */\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Welcome to calculations page!!</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Operand1: </label>\r\n                        <input type=\"text\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.operand1}\r\n                            onChange={this.onChangeOperand1}\r\n                        />\r\n                    </div >\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Operand2: </label>\r\n                        <input type=\"text\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.operand2}\r\n                            onChange={this.onChangeOperand2}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Operator: </label>\r\n                        <select\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.operator}\r\n                            onChange={this.onChangeOperator}>\r\n                            <option value=\"+\">+</option>\r\n                            <option value=\"-\">-</option>\r\n                            <option value=\"*\">*</option>\r\n                            <option value=\"/\">/</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"calculate\" className=\"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n                <table border='1' >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Operand 1</th>\r\n                            <th>Operand 2</th>\r\n                            <th>Operator</th>\r\n                            <th>Result</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {\r\n                            this.state.calculations.map(function (calc) {\r\n                                return <tr key={calc._id}>\r\n                                    <td>{calc.operand1}</td>\r\n                                    <td>{calc.operand2}</td>\r\n                                    <td>{calc.operator}</td>\r\n                                    <td>{calc.result}</td>\r\n                                </tr>\r\n                            })\r\n\r\n                        }\r\n                    </tbody>\r\n\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}","import './App.css';\nimport React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport CalculationsList from \"./components/Calculations-List.component\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={CalculationsList}/>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}